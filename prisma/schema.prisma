generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CustomerMaster {
  id              String    @id @default(cuid())
  customerCode    String    @unique
  customerName    String
  contactPerson   String?
  address         String?
  pincode         String?
  city            String?
  mobile          String?
  phone           String?
  email           String?   @unique
  dateOfBirth     DateTime? @db.Date
  isInternational Boolean   @default(false)
  ownership       String?

  contractNo           String?
  contractDate         DateTime? @db.Date
  panNo                String?
  gstNo                String?
  fuelSurchargePercent Float?
  discountPercent      Float?
  openingBalance       Float?
  balanceType          String?
  rates                RateMaster[]

  creditClientBookings              CreditClientBooking[]
  internationalCreditClientBookings InternationalCreditClientBooking[]

  bookings BookingMaster[]   @relation("CustomerMasterToBookingMaster")
  invoices Invoice[]
  payments CustomerPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RateMaster {
  id                String      @id @default(cuid())
  mode              String
  consignmentType   String
  zoneId            String
  zone              ZoneMaster  @relation(fields: [zoneId], references: [id])
  stateId           String
  state             StateMaster @relation(fields: [stateId], references: [id])
  city              String
  fromWeight        Float
  toWeight          Float
  rate              Float
  hasAdditionalRate Boolean     @default(false)
  additionalWeight  Float?
  additionalRate    Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  customerId String
  customer   CustomerMaster @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
}

model TaxMaster {
  id            String   @id @default(cuid())
  taxCode       String   @unique
  description   String
  ratePercent   Decimal  @db.Decimal(5, 3)
  withinState   Boolean  @default(false)
  forOtherState Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CountryMaster {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ZoneMaster {
  id        String        @id @default(cuid())
  code      String        @unique
  name      String
  active    Boolean       @default(true)
  states    StateMaster[]
  rates     RateMaster[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model StateMaster {
  id        String          @id @default(cuid())
  code      String          @unique
  name      String
  zoneId    String
  zone      ZoneMaster      @relation(fields: [zoneId], references: [id])
  active    Boolean         @default(true)
  rates     RateMaster[]
  cities    CityMaster[]
  pincodes  PincodeMaster[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model CityMaster {
  id        String          @id @default(cuid())
  code      String          @unique
  name      String
  stateId   String
  state     StateMaster     @relation(fields: [stateId], references: [id])
  active    Boolean         @default(true)
  pincodes  PincodeMaster[]
  // bookingsAsDestination BookingMaster[] @relation("BookingMaster_destinationCityFk")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model PincodeMaster {
  id        String      @id @default(cuid())
  pincode   String      @unique
  stateId   String
  state     StateMaster @relation(fields: [stateId], references: [id])
  cityId    String
  city      CityMaster  @relation(fields: [cityId], references: [id])
  active    Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model InvoiceSettings {
  id              String   @id @default(cuid())
  invoiceNoType   String
  invoicePrefix   String?
  printWithMode   Boolean  @default(false)
  handbillInvoice Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RegistrationDetails {
  id          String @id @default(cuid())
  companyName String
  ownerName   String
  address     String
  pincode     String
  city        String
  state       String

  phone  String?
  mobile String?
  email  String?

  panNo        String?
  gstNo        String?
  serviceTaxNo String?
  hsnSacCode   String?
  stateCode    String?

  associateWith String?

  bankName      String?
  bankAccountNo String?
  ifscCode      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookRateMaster {
  id         String   @id @default(cuid())
  bookSeries String
  amount     Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmployeeMaster {
  id            String    @id @default(cuid())
  employeeCode  String    @unique
  employeeName  String
  address       String?
  pincode       String?
  city          String?
  phone         String?
  mobile        String?
  sex           String?
  email         String?   @unique
  maritalStatus String?
  dateOfBirth   DateTime?  @db.Date
  dateOfJoining DateTime?  @db.Date
  photoUrl      String?

  shiftStartTime String?
  shiftEndTime   String?
  workingHours   Float?

  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  attendances EmployeeAttendance[]
}

model EmployeeAttendance {
  id            String    @id @default(cuid())
  date          DateTime  @db.Date
  status        String
  checkIn       DateTime?
  checkOut      DateTime?
  totalHours    Float?
  overtimeHours Float?
  lateByMinutes Int?
  fineAmount    Float?
  advanceAmount Float?
  remarks       String?

  employee   EmployeeMaster @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([employeeId, date])
}

model DocketStock {
  id        String   @id @default(cuid())
  awbNo     String   @unique
  status    String   @default("UNUSED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppUser {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  userType     UserType
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SmsApiSettings {
  id          String   @id @default(cuid())
  apiPart1    String
  apiPart2    String
  apiPart3    String?
  companyName String
  phoneNo     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SmsTemplate {
  id           String   @id @default(cuid())
  templateName String   @unique
  templateText String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BookingMaster {
  id                      String          @id @default(cuid())
  srNo                    Int?
  bookingDate             DateTime        @db.Date
  awbNo                   String          @unique
  location                String?
  destinationCity         String
  mode                    String
  pcs                     Int
  pin                     String
  dsrContents             String?
  dsrNdxPaper             String?
  invoiceValue            Float? // Material/Consignment Value
  actualWeight            Float? // Fr weight
  chargeWeight            Float? // Base Fr weight
  fuelSurcharge           Float?
  shipperCost             Float?
  otherExp                Float?
  gst                     Float?
  valumetric              Float?
  invoiceWt               Float?
  clientBillingValue      Float?
  creditCustomerAmount    Float?
  regularCustomerAmount   Float?
  customerType            String?
  senderDetail            String?
  paymentStatus           String?
  senderContactNo         String?
  address                 String?
  adhaarNo                String?
  customerAttendBy        String?
  status                  String?
  statusDate              DateTime?    @db.Date
  pendingDaysNotDelivered Int?
  receiverName            String?
  receiverContactNo       String?
  ref                     String?
  delivered               String?
  dateOfDelivery          DateTime?    @db.Date
  todayDate               DateTime?    @db.Date
  customerCode            String?
  customerId              String?
  customer                CustomerMaster? @relation("CustomerMasterToBookingMaster", fields: [customerId], references: [id])
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
}

model CashBooking {
  id             String   @id @default(cuid())
  bookingDate    DateTime  @db.Date
  senderName     String
  senderMobile   String
  sourcePincode  String
  sourceState    String
  sourceCity     String
  receiverName   String
  receiverMobile String

  consignmentNo  String    @unique
  docType        String
  mode           String
  pincode        String
  city           String
  pieces         Int
  weight         Float
  courierCharged Float
  contents       String?
  value          Float?
  vsAmount       Float?
  amountCharged  Float
  smsSent        Boolean   @default(false)
  smsDate        DateTime?  
  status         String?   @default("BOOKED")
  statusDate     DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InternationalCashBooking {
  id             String   @id @default(cuid())
  bookingDate    DateTime  @db.Date
  senderName     String
  senderMobile   String
  receiverName   String
  receiverMobile String

  consignmentNo  String    @unique
  docType        String
  mode           String
  country        String
  pieces         Int
  weight         Float
  courierCharged Float
  contents       String?
  value          Float?
  vasAmount      Float?
  amountCharged  Float
  smsSent        Boolean   @default(false)
  smsDate        DateTime?
  status         String?   @default("BOOKED")
  statusDate     DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditClientBooking {
  id            String         @id @default(cuid())
  bookingDate   DateTime       @db.Date
  consignmentNo String         @unique
  customerId    String
  customer      CustomerMaster @relation(fields: [customerId], references: [id])
  docType       String
  serviceType   String
  pincode       String
  city          String
  weight        Float
  courierAmount Float
  vasAmount     Float?
  chargeAmount  Float
  consigneeName String
  smsSent       Boolean        @default(false)
  smsDate       DateTime?
  status        String?        @default("BOOKED")
  statusDate    DateTime?      @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InternationalCreditClientBooking {
  id            String         @id @default(cuid())
  bookingDate   DateTime        @db.Date
  consignmentNo String         @unique
  customerId    String
  customer      CustomerMaster @relation(fields: [customerId], references: [id])
  docType       String
  serviceType   String
  country       String
  weight        Float
  courierAmount Float
  vasAmount     Float?
  chargeAmount  Float
  consigneeName String
  smsSent       Boolean        @default(false)
  smsDate       DateTime?
  status        String?        @default("BOOKED")
  statusDate    DateTime?      @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id          String          @id @default(cuid())
  invoiceNo   String          @unique
  type        String
  invoiceDate DateTime        @db.Date
  totalAmount Float
  totalTax    Float
  netAmount   Float
  customerId  String?
  customer    CustomerMaster? @relation(fields: [customerId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  periodFrom  DateTime?       @db.Date
  periodTo    DateTime?       @db.Date

  paymentStatus PaymentStatus @default(UNPAID)
  amountPaid    Float         @default(0)

  bookings          InvoiceBooking[]
  paymentsOnInvoice PaymentOnInvoice[]
}

model InvoiceBooking {
  id               String   @id @default(cuid())
  invoiceId        String
  invoice          Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  bookingId        String
  bookingType      String
  consignmentNo    String
  bookingDate      DateTime  @db.Date
  senderName       String
  receiverName     String
  city             String
  amountCharged    Float
  taxAmount        Float?
  weight           Float?
  consignmentValue Float?
  doxType          String?
  numPcs           Int?
  serviceType      String?
  shipperCost      Float?
  waybillSurcharge Float?
  otherExp         Float?
  fuelSurcharge    Float?
  gst              Float?

  createdAt DateTime @default(now())
}

enum UserType {
  ADMIN
  USER
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
}

model CustomerPayment {
  id            String   @id @default(cuid())
  paymentDate   DateTime  @db.Date
  amount        Float
  paymentMethod String // e.g., UPI, BANK, CASH
  referenceNo   String?
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customerId String
  customer   CustomerMaster @relation(fields: [customerId], references: [id], onDelete: Cascade)

  invoicesApplied PaymentOnInvoice[]

  @@index([customerId])
}

model PaymentOnInvoice {
  id            String   @id @default(cuid())
  amountApplied Float
  createdAt     DateTime @default(now())

  paymentId String
  payment   CustomerPayment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@unique([paymentId, invoiceId])
}

model InvoiceCounter {
  type       String   @id
  lastNumber Int      @default(0)
  updatedAt  DateTime @updatedAt
}
